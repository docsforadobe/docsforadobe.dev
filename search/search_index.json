{"config": {"lang": ["en"], "separator": "[\\s\\-,\\.:!=\\[\\]()\"/]+", "pipeline": ["stopWordFilter"]}, "docs": [{"location": "", "title": "Extensibility Directory", "text": "<p> <p></p>"}, {"location": "#adobe-cc-extensibility-directory", "title": "Adobe CC Extensibility Directory", "text": "<p>Quick links to a variety of extensibility resources.</p> <p>Info</p> <p>External resources, marked with the \u29c9 symbol, are outside the control of this domain.</p> <p>docsforadobe and the docsforadobe.dev community community are not and do not claim to be legally affiliated with Adobe.</p> <p>All pages hosted on this domain exist for educational purposes only, are independently owned, and rely on community support and management.</p> <p>Adobe is either a registered trademark or trademark of Adobe Systems Incorporated in the United States and/or other countries.</p> <p>Questions, comments, concerns? Email us!</p>"}, {"location": "_global/readme/", "title": "docsforadobe.dev MkDocs Config", "text": "<p>This repo holds the common components shared between this org's hosted MkDocs documentation projects.</p> <p>The idea is that this repo will be kept up-to-date with global config, and each child repo will use the provided script to download the latest commit from this repo, and have its \"local\" MkDocs config point to the downloaded files from this repo.</p> <p>In all cases, each child repo will be able to override config items here as needed.</p>"}, {"location": "_global/readme/#updating-this-repo", "title": "Updating This Repo", "text": "<p>See Modifying Common Components in the org contribution guide for info on how this repo works, and best practices for modifying it.</p>"}, {"location": "contributing/contribution-guide/", "title": "Contribution Guide", "text": "<p>This endeavour is primarily community-supported &amp; run; contributors are welcome and encouraged to suggest fixes, adjustments, notes/warnings, and anything else that may help the project.</p> <p>This project is written in Markdown, served using MkDocs, themed with Material for MkDocs.</p> <p>Note</p> <p>Broad info on Markdown syntax is outside the scope of this guide. Please familiarise yourself with it before contributing.</p>"}, {"location": "contributing/contribution-guide/#contributing", "title": "Contributing", "text": "<p>This contribution guide is split into a few chapters.</p> <ul> <li>To set up your environment &amp; get started with contributing</li> <li>Documentation style</li> <li>Other tips &amp; tricks</li> <li>Working with org-wide common components</li> </ul> <p>Tip</p> <p>This repo itself may not adhere to the standards above, as we're using a number of custom features to help demonstrate best practices.</p> <p>If in doubt, follow the above guides and templates, not the source code of this contribution guide.</p>"}, {"location": "contributing/contribution-guide/#licensing-ownership", "title": "Licensing &amp; Ownership", "text": "<p>This project exists for educational purposes only.</p> <p>All content is copyright Adobe Systems Incorporated.</p>"}, {"location": "contributing/getting-set-up/", "title": "Getting Set Up", "text": "<p>While it's technically possible to start contributing just through editing the markdown, we ask that you build the project locally to test your changes &amp; ensure the result is what you'd expect.</p> <p>To start working locally, you'll need to:</p> <ol> <li>Install Python</li> <li>Download the repo locally</li> <li>Install dependencies</li> <li>Build the project</li> </ol> Quickstart guide <p>Assuming you're familiar with some of the below, here's a quick example way to get set up:</p> <pre><code># Clone target repo\ngit clone https://github.com/docsforadobe/after-effects-scripting-guide.git\n\n# Navigate to that directory\ncd after-effects-scripting-guide\n\n# Install dependencies\npip install -r requirements.txt\n\n# Serve the docs\nmkdocs serve\n</code></pre>"}, {"location": "contributing/getting-set-up/#install-python", "title": "Install Python", "text": "<p>This project runs on Python &amp; dependent packages.</p> <p>You'll need to install Python 3 &amp; pip (a Python package manager; typically comes with Python installs)</p> <p>Note</p> <p>Specific Python installation instructions will depend on your OS; see above links for more info.</p>"}, {"location": "contributing/getting-set-up/#download-the-repo-locally", "title": "Download the repo locally", "text": "<p>From a terminal, enter the command:</p> <pre><code>git clone path/to/repo.git\n</code></pre> <p>For example, to download the After Effects Scripting Guide:</p> <pre><code>git clone https://github.com/docsforadobe/after-effects-scripting-guide.git\n</code></pre>"}, {"location": "contributing/getting-set-up/#install-dependencies", "title": "Install dependencies", "text": "<p>Once Python is installed, you'll need to install the required dependencies for the specific documentation guide you're working in.</p> <p>The dependencies for each repo is held in a text file in the root of the repo, <code>requirements.txt</code>.</p> <p>These are things like the actual system used to build the project (\"MkDocs\"), as well as any plugins or extensions required for the specific guide you're working in.</p> <p>First, open a terminal to the repo's directory.</p> <p>Then, you can tell Python to install these dependencies globally onto your device with the following command:</p> <pre><code>pip install -r requirements.txt\n</code></pre> <p>If you're wanting to install these locally (for just the local user), you can append the <code>--user</code> flag:</p> <pre><code>pip install -r requirements.txt --user\n</code></pre>"}, {"location": "contributing/getting-set-up/#macos-virtual-environments", "title": "MacOS &amp; Virtual Environments", "text": "<p>On MacOS, you may need to set up a virtual environment in order for Python to allow you to install these dependencies.</p> <p>This author isn't familiar enough to explain why this is required, though these commands seem to do the trick before running the <code>pip</code> command above.</p> <pre><code>python3 -m venv venv/\nsource venv/bin/activate\n</code></pre> <p>This will create a subfolder in the directory, <code>/venv/</code>, that will hold these dependencies. These files should not be committed to the repo, with <code>/venv/</code> being present in each repo's <code>.gitignore</code> file.</p>"}, {"location": "contributing/getting-set-up/#build-the-project", "title": "Build the project", "text": "<p>Once the dependencies are installed, you can run the following command to build a local copy of the docs:</p> <pre><code>mkdocs serve\n</code></pre> <p>This will set up a virtual server, render the docs to html, and offer up a local url to view these local docs at.</p> <p>By default, this local url is <code>http://127.0.0.1:8000</code>.</p> <p>Tip</p> <p>Any update to the MkDocs config file (<code>./mkdocs.yml</code>) or any of the .md docs files will automagically reload the above pages, showing the updates!</p> <p>Be sure to keep an eye on the terminal for any potential errors or warnings that may come up while working.</p>"}, {"location": "contributing/other-tips/", "title": "Other Tips", "text": "<p>Various other tips, suggestions, solutions that we've found to be helpful when working on these guides.</p>"}, {"location": "contributing/other-tips/#ignore-the-_global-folder", "title": "Ignore the _global folder!", "text": "<p>Each guide shares elements with every other guide in the org. These all live within the <code>./docs/_global/</code> folder, and are not to be updated manually.</p> <p>While these common components should be updated periodically (or as needed), there's a specific process to follow. See Updating Common Components.</p>"}, {"location": "contributing/other-tips/#use-code-editor-extensions", "title": "Use code editor extensions!", "text": "<p>As markdown is such a common language, there are a ton of code editor extensions to help writing it. Take advantage of them!</p> <p>One specific place this can help is when working with tables. As these can get fairly long and unwieldy, being able to quickly format the table to align columns &amp; fix formatting is way better than doing this by hand.</p>"}, {"location": "contributing/other-tips/#adding-undocumented-attributes-or-methods", "title": "Adding undocumented attributes or methods", "text": "<p>If you find attributes or methods that are not mentioned in this documentation, and they are not publically announced by Adobe, please add this warning to attribute/method so the user knows to use it at their own risk.</p> RenderedMarkdown <p>Warning</p> <p>This method/property is officially undocumented and was found via research. The information here may be inaccurate, and this whole method/property may disappear or stop working some point. Please contribute if you have more information on it!</p> <pre><code>!!! warning\n    This method/property is officially undocumented and was found via research. The information here may be inaccurate, and this whole method/property may disappear or stop working some point. Please contribute if you have more information on it!\n</code></pre>"}, {"location": "contributing/style-guide/", "title": "Style Guide", "text": "<p>These guides are primarily written in plain, vanilla markdown. With that said, in order to maintain a consistent experience across docs, we require contributors to adhere to some opinionated decisions.</p> <p>In addition, we are making use of some specific features &amp; syntax decisions introduced by the current rendering framework being used (MkDocs for the engine, Material for MkDocs for the theme base).</p> <p>This page serves to clarify some of these decisions, as well as specific tips and workflows for ensuring consistency.</p> <p>Note</p> <p>If anything is unclear or should be re-evaluated, please open a ticket or discussion post in the Github org.</p>"}, {"location": "contributing/style-guide/#writing-tips", "title": "Writing Tips", "text": "<ul> <li>Do not manually insert linebreaks! Let the text be long; it will wrap as necessary upon render.</li> <li>Any indented blocks require four spaces in order to properly nest. This applies to lists, admonitions, nested content blocks, and more. Four spaces!</li> <li>As frequently as possible, add crosslinks in the guides!<ul> <li>If an attribute returns an object that's also documented, adding in a crosslink from the attribute's \"type\" to the other object's page greatly improves the user experience in these guides.</li> </ul> </li> </ul>"}, {"location": "contributing/style-guide/#title-hierarchy", "title": "Title Hierarchy", "text": "<p>The below is the most common general structure, though of course will depend on any specific guide or page's needs.</p> <pre><code># Page\n## Category (\"Attributes\", \"Methods\")\n### Attribute/Method Name (\"CharacterRange.characterEnd\")\n#### Info Header (\"Description\", \"Type\", \"Parameters\", \"Returns\")\n</code></pre>"}, {"location": "contributing/style-guide/#element-templating", "title": "Element Templating", "text": "<p>Typically, we try to ensure consistency between all Class pages across the docs, and between all Attributes and Methods.</p>"}, {"location": "contributing/style-guide/#class-pages", "title": "Class Pages", "text": "<p>These should broadly be structured following the below template. Note that not all page elements may apply, or some other page elements may be added as needed.</p> <p>Note that depending on the specific page format, the 'depth' of each title (as far as number of <code>#</code>) may change.</p> TemplateSample <pre><code># Page Title\n\n`sample.call`\n\n#### Description\n\nDescription of this class\n\n#### Example\n\nClass-wide example(s), if applicable\n\n---\n\n## Attributes\n\n{ list of attributes }\n\n---\n\n## Methods\n\n{ list of attributes }\n</code></pre> <pre><code># Layer object\n\n`app.project.item(index).layer(index)`\n\n#### Description\n\nThe Layer object provides access to layers within compositions. It can be accessed from an item's layer collection either by index number or by a name string.\n\n#### Example\n\nIf the first item in the project is a [CompItem](../item/compitem.md), this example disables the first layer in that composition and renames it. This might, for example, turn an icon off in the composition.\n\n`var layer = app.project.item(1).layer(1);`\n\n---\n\n## Attributes\n\n---\n\n## Methods\n</code></pre>"}, {"location": "contributing/style-guide/#attributes", "title": "Attributes", "text": "<p>In this context, attributes are synonymous with object properties. (ie <code>class.attribute</code>, e.g. <code>layer.name</code>).</p> <p>The base attribute template should look similar to:</p> TemplateSample <pre><code>### Class.attributeName\n\n`sample.attribute.call`\n\n#### Description\n\nAttribute description\n\n#### Type\n\nProperty Type. { Read-only, if applicable. }\n\n{ If enum, list possible options. }\n{ If an object, create a table of object properties. }\n</code></pre> <pre><code>### Layer.autoOrient\n\n`app.project.item(index).layer(index).autoOrient`\n\n#### Description\n\nThe type of automatic orientation to perform for the layer.\n\n#### Type\n\nAn `AutoOrientType` enumerated value; read/write. One of:\n\n- `AutoOrientType.ALONG_PATH` Layer faces in the direction of the motion path.\n- `AutoOrientType.CAMERA_OR_POINT_OF_INTEREST` Layer always faces the active camera or points at its point of interest.\n- `AutoOrientType.CHARACTERS_TOWARD_CAMERA` Each character in a per-character 3D text layer automatically faces the active camera.\n- `AutoOrientType.NO_AUTO_ORIENT` Layer rotates freely, independent of any motion path, point of interest, or other layers.\n</code></pre>"}, {"location": "contributing/style-guide/#methods", "title": "Methods", "text": "<p>Methods are formatted similarly to attributes, with two primary differences:</p> <ul> <li>The addition of the <code>Parameters</code> section, including a table of parameters</li> <li>The use of <code>Returns</code> in lieu of <code>Type</code> for the method's returned type.</li> </ul> <p>For all parameters &amp; property tables, please include the type of each parameter / property!</p> TemplateSample <pre><code>### Class.methodName()\n\n`sample.method.call()`\n\n#### Description\n\nMethod description\n\n#### Parameters { If applicable }\n\n|    Parameter    |   Type    | Description |\n| --------------- | --------- | ----------- |\n| `parameterName` | Item type | Description |\n\n#### Returns\n\nProperty Type.\n\n{ If enum, list possible options. }\n{ If an object, create a table of object properties. }\n</code></pre> <pre><code>### Layer.activeAtTime()\n\n`app.project.item(index).layer(index).activeAtTime(time)`\n\n#### Description\n\nReturns `true` if this layer will be active at the specified time.\n\nTo return `true`, the layer must be enabled, no other layer may be soloing unless this layer is soloed too, and the time must be between the `inPoint` and `outPoint` values of this layer.\n\n#### Parameters\n\n| Parameter |         Type         |     Description      |\n| --------- | -------------------- | -------------------- |\n| `time`    | Floating-point value | The time in seconds. |\n\n#### Returns\n\nBoolean.\n</code></pre>"}, {"location": "contributing/style-guide/#tables", "title": "Tables", "text": "<p>A large part of all of these guides are tables. Due to the various complexities within these guides, we'll be using two different styles of tables\u2013 what we're calling \"simple\" (standard markdown tables) and \"complex\" (markdown grid tables).</p>"}, {"location": "contributing/style-guide/#simple-tables", "title": "Simple Tables", "text": "<p>These are to be used in cases where we don't require any complicated, nested content \u2013 when there's simple text formatting, one line of text, and when we don't need linebreaks, lists, admonitions, etc.</p> <p>Those tables look generally like this (though any vanilla table syntax is acceptable to use, such as alignment options):</p> RenderedMarkdown Header 1 Header 2 Header 3 <code>foo</code> bar 0.00 <code>bar</code> foo 100.00 <pre><code>| Header 1 | Header 2 | Header 3 |\n| -------- | -------- | -------: |\n| `foo`    | bar      |     0.00 |\n| `bar`    | foo      |   100.00 |\n</code></pre>"}, {"location": "contributing/style-guide/#complex-tables", "title": "Complex Tables", "text": "<p>When we want to include more info within a given row or column\u2013 think nested lists, line breaks, admonitions, etc\u2013 we'll be using these \"grid tables\".</p> <p>Info</p> <p>See this repo issue for more info and examples.</p> <p>They differ in both syntax (as you'll see below), but also in that they require a divider between every row. You'll also need to ensure they're properly formatted (pipes aligned, etc) in order to render properly.</p> RenderedMarkdown <p>Title A</p> <p>Title B</p> <p>Item 1.A</p> <p>Item 1.B</p> <p>Item 1.B Line 2</p> <p>Item 2.A </p> <ul> <li>Item 2.B</li> <li>Item 2.B</li> </ul> <p>Item 3.A</p> <p>Item 3.B</p> <p>Warning</p> <p>Deprecated</p> <pre><code>+----------+-----------------+\n| Title A  |     Title B     |\n+==========+=================+\n| Item 1.A | Item 1.B        |\n|          |                 |\n|          | Item 1.B Line 2 |\n+----------+-----------------+\n| Item 2.A | - Item 2.B      |\n|          | - Item 2.B      |\n+----------+-----------------+\n| Item 3.A | Item 3.B        |\n|          |                 |\n|          | !!! warning     |\n|          |     Deprecated  |\n+----------+-----------------+\n</code></pre>"}, {"location": "contributing/style-guide/#code-samples", "title": "Code Samples", "text": "<p>There are three different contexts under which we'll be displaying code (or: wanting text to render as monospaced code).</p>"}, {"location": "contributing/style-guide/#inline-code", "title": "Inline code", "text": "<p>Typically, this is only used for quick, throwaway samples (or to identify something as code, or a variable name).</p> RenderedMarkdown <p>An example would be when discussing a boolean returning <code>true</code> in one case, <code>false</code> in another.</p> <p>Or, in the description of an attribute, that you can access something by using <code>Comp.layer(1)</code> \u2013 very simple samples.</p> <pre><code>An example would be when discussing a boolean returning `true` in one case, `false` in another.\n\nOr, in the description of an attribute, that you can access something by using `Comp.layer(1)` \u2013 very simple samples.\n</code></pre>"}, {"location": "contributing/style-guide/#code-fences", "title": "Code fences", "text": "<p>These are most often used for longer, more fleshed-out code samples.</p> <p>Always include a language in the code fence description (so that the renderer can properly syntax highlight the code).</p> RenderedMarkdown <pre><code>function err(errString) {\n    alert(errString) ;\n}\napp.onError = err;\n</code></pre> <pre><code>extern \"C\" DllExport\nPF_Err PluginDataEntryFunction(\n    PF_PluginDataPtr inPtr,\n    PF_PluginDataCB  inPluginDataCallBackPtr,\n    SPBasicSuite*    inSPBasicSuitePtr,\n    const char*      inHostName,\n    const char*      inHostVersion)\n{\nPF_Err result = PF_Err_INVALID_CALLBACK;\n\nresult = PF_REGISTER_EFFECT(\n    inPtr,\n    inPluginDataCallBackPtr,\n    \"ColorGrid\",       // Name\n    \"ADBE ColorGrid\",  // Match Name\n    \"Sample Plug-ins\", // Category\n    AE_RESERVED_INFO); // Reserved Info\n\nreturn result;\n}\n</code></pre> <pre><code>set theFile to choose file\ntell application \"Adobe After Effects CS6\"\n    DoScriptFile theFile\nend tell\n</code></pre> <pre><code>```javascript\nfunction err(errString) {\n    alert(errString) ;\n}\napp.onError = err;\n```\n</code></pre> <pre><code>```cpp\nextern \"C\" DllExport\nPF_Err PluginDataEntryFunction(\n    PF_PluginDataPtr inPtr,\n    PF_PluginDataCB  inPluginDataCallBackPtr,\n    SPBasicSuite*    inSPBasicSuitePtr,\n    const char*      inHostName,\n    const char*      inHostVersion)\n{\nPF_Err result = PF_Err_INVALID_CALLBACK;\n\nresult = PF_REGISTER_EFFECT(\n    inPtr,\n    inPluginDataCallBackPtr,\n    \"ColorGrid\",       // Name\n    \"ADBE ColorGrid\",  // Match Name\n    \"Sample Plug-ins\", // Category\n    AE_RESERVED_INFO); // Reserved Info\n\nreturn result;\n}\n```\n</code></pre> <pre><code>```applescript\nset theFile to choose file\ntell application \"Adobe After Effects CS6\"\n    DoScriptFile theFile\nend tell\n```\n</code></pre>"}, {"location": "contributing/style-guide/#code-fences-within-tables", "title": "Code fences within tables", "text": "<p>This is the trickiest, and most annoying to work with.</p> <p>As both code fences and markdown tables pay attention to line breaks, these features necessarily fight one another in order to break rendering.</p> <p>To solve this, the only (currently-known) workaround is to wrap the code in html, so that it can be properly rendered as code. We need to replace line breaks with <code>&lt;br/&gt;</code>, and wrap the whole block in <code>&lt;pre lang=\"lang\"&gt;&lt;/pre&gt;</code> (identifying the language)</p> <p>Note</p> <p>Be sure to identify the language here, for syntax highlighting purposes!</p> <p>Here's a before/after of one a simple code sample:</p> MarkdownHTML <pre><code>```javascript\nfunction err(errString) {\n    alert(errString) ;\n}\napp.onError = err;\n```\n</code></pre> <pre><code>&lt;pre lang=\"javascript\"&gt;function err(errString) {&lt;br/&gt;    alert(errString) ;&lt;br/&gt;}&lt;br/&gt;app.onError = err;&lt;/pre&gt;\n</code></pre> <p>And when placed within a table:</p> <p>Tip</p> <p>You'll likely want to be using complex tables, in order to add additional info about the example within the table itself.</p> RenderedMarkdown <p>Title</p> <p>Sample</p> <p>Alert error</p> <p>This sample shows how to specify a callback function when an error occurs.</p> <p><pre><code>function err(errString) {\n    alert(errString) ;\n}\napp.onError = err;\n</code></pre></p> <pre><code>+-------------+----------------------------------------------------------------------------------------------------------------+\n|    Title    |                                                     Sample                                                     |\n+=============+================================================================================================================+\n| Alert error | This sample shows how to specify a callback function when an error occurs.                                     |\n|             |                                                                                                                |\n|             | &lt;pre lang=\"javascript\"&gt;function err(errString) {&lt;br/&gt;    alert(errString) ;&lt;br/&gt;}&lt;br/&gt;app.onError = err;&lt;/pre&gt; |\n+-------------+----------------------------------------------------------------------------------------------------------------+\n</code></pre>"}, {"location": "contributing/style-guide/#admonitions", "title": "Admonitions", "text": "<p>Often, we'll want to call out specific pieces of info to the end reader. Typically, these are in the form of notes, tips, and warnings though more admonitions can be used as appropriate.</p> <p>To author these, use the following sytax. Note that the content must be indented with 4 spaces in the line following the header!</p> <p>Adding in linebreaks, lists, code, etc. are all supported within admonitions.</p>"}, {"location": "contributing/style-guide/#note", "title": "Note", "text": "<p>Notes detail version added, and/or relevant pieces of information.</p> RenderedMarkdown <p>Note</p> <p>Notes detail version added, and/or relevant pieces of information.</p> <pre><code>!!! note\n    Notes detail version added, and/or relevant pieces of information.\n</code></pre>"}, {"location": "contributing/style-guide/#tip", "title": "Tip", "text": "<p>Tips detail version added, and/or relevant pieces of information.</p> RenderedMarkdown <p>Tip</p> <p>Tips detail version added, and/or relevant pieces of information.</p> <pre><code>!!! tip\n    Tips detail version added, and/or relevant pieces of information.\n</code></pre>"}, {"location": "contributing/style-guide/#warning", "title": "Warning", "text": "<p>Warnings convey negative behaviours, or when something won't work the way you'd expect.</p> RenderedMarkdown <p>Warning</p> <p>Warnings convey negative behaviours, or when something won't work the way you'd expect.</p> <p>They're also used to indicate undocumented elements.</p> <pre><code>!!! warning\n    Warnings convey negative behaviours, or when something won't work the way you'd expect.\n\n    They're also used to indicate undocumented elements.\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/", "title": "Extending Common Components", "text": "<p>If you want to extend the common components in your guide, we've provided a few methods to do so.</p> <p>Note that for the below cases, you must use the methods outlined below \u2013 we've built a system for overriding various MkDocs features, and this system is required for full compatibility.</p> <p>Note</p> <p>Please override sparingly! Consistency between guides is important.</p> Quick extension reference <p>Assuming you're familiar with some of the below, here's a quick list of allowable overrides:</p> <pre><code>extra:\n    overrides:\n        custom_dir: path/to/template_root\n        hooks:\n            - path/to/hook.py\n            - path/to/hook2.py\n        not_in_nav:\n            - gitignore_style_ignore_spec\n        theme_features:\n            - theme.feature\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/#css-js", "title": "CSS &amp; JS", "text": "<p>Each guide should have an existing css &amp; js file in <code>./docs/static/</code>. These files are called <code>extra.css</code> and <code>extra.js</code>, and may be used as needed.</p> <p>Alternatively, you can add new css/js files to the above directory, and then add the paths to the relevant <code>extra_css</code> or <code>extra_js</code> key in <code>./mkdocs.yml</code>.</p>"}, {"location": "contributing/common-components/extending-common-components/#template-pages", "title": "Template Pages", "text": "<p>This documentation system allows creating custom page templates to override existing components. You can view more info in the MkDocs user guide and the Material for MkDocs user guide.</p> <p>If your guide needs to use custom templates, add a path to that directory within <code>./mkdocs.yml</code>;</p> <pre><code>extra:\n    overrides:\n        custom_dir: path/to/template_root\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/#python-hooks", "title": "Python Hooks", "text": "<p>MkDocs allows authors to write small snippets of Python that hook into MkDocs to tweak behaviour in various ways.</p> <p>There shouldn't be too much need for these, but if for some reason it comes up, see the MkDocs user guide for info on writing hooks.</p> <p>If your guide needs to use custom hooks, add a path to each hook within <code>./mkdocs.yml</code>;</p> <pre><code>extra:\n    overrides:\n        hooks:\n            - path/to/hook.py\n            - path/to/hook2.py\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/#excluding-items-from-nav-menu", "title": "Excluding Items from Nav Menu", "text": "<p>There are occasionally times where you want to remove some items from the guide's navigation menu.</p> <p>For these cases, include a gitignore-style path spec to each item within the overrides key in <code>./mkdocs.yml</code>:</p> <pre><code>extra:\n    overrides:\n        not_in_nav:\n            - gitignore_style_ignore_spec\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/#theme-features", "title": "Theme Features", "text": "<p>While we aim for consistency between guides, on occasion a specific project can benefit from using additional features that Material for MkDocs provides.</p> <p>If your guide needs to use additional theme features, add each feature name within <code>./mkdocs.yml</code>;</p> <pre><code>extra:\n    overrides:\n        theme_features:\n            - theme.feature\n</code></pre>"}, {"location": "contributing/common-components/extending-common-components/#markdown-extensions-plugins", "title": "Markdown Extensions &amp; Plugins", "text": "<p>Adding markdown extensions &amp; plugins is fairly straightforward.</p> <ol> <li> <p>In <code>./mkdocs.yml</code>, update the <code>markdown_extensions</code> or <code>plugins</code> lists with the new addition</p> <p>Note</p> <p>Note the specific syntax being used here! Due to how MkDocs inheritance works, we must use this object syntax: <pre><code>markdown_extensions:\n    extension_name: {}\n</code></pre> instead of this list syntax: <pre><code>markdown_extensions:\n    - extension_name\n</code></pre></p> <p>See <code>./mkdocs.yml</code> for further samples.</p> </li> <li> <p>In <code>./requirements.txt</code>, add the name of the extension or plugin (if applicable \u2013 some extensions don't need to be explicitly installed!)</p> </li> </ol>"}, {"location": "contributing/common-components/modifying-common-components/", "title": "Modifying Common Components", "text": "<p>Danger</p> <p>For advanced users only!</p> <p>These changes will be pushed to many different sites! It's your responsibility to ensure the change is safe.</p> <p>If something needs to be updated globally (across all orgs):</p> <ul> <li>Perform that work in the docsforadobe-mkdocs-config repo<ul> <li>Note: This page assumes you're working from the above repo</li> </ul> </li> <li>(Manually) update one of your local repo's <code>./docs/_global/</code> contents with the updated content, to verify the change works as expected<ul> <li>Do not commit incremental <code>_global</code> updates to any child project!</li> </ul> </li> <li>Once complete, submit a PR to the above repo for review.</li> </ul> <p>Note</p> <p>While these changes are used globally, this system is specifically built in such a way that each guide can override some of these global settings if needed.</p>"}, {"location": "contributing/common-components/modifying-common-components/#css-js", "title": "CSS &amp; JS", "text": "<p>If you're changing something generally straightforward (javascript, css), you should use the existing <code>./js/global.js</code> and <code>./css/global.css</code> files. These are purpose-built to do the job.</p> <p>If you'd like to add a new css or js file instead of using the above:</p> <ol> <li>Place those in the appropriate folder (<code>./css/</code> or <code>./js/</code>)</li> <li>In <code>./mkdocs.yml</code>, update the <code>extra.overrides.extra_css</code> or <code>extra.overrides.extra_js</code> lists with a path to your new file</li> </ol>"}, {"location": "contributing/common-components/modifying-common-components/#template-pages", "title": "Template Pages", "text": "<p>Similarly, if you're hoping to tweak the page templates, you can easily tweak (or add to) anything within the <code>./overrides/</code> directory without issue.</p> <p>Make sure these files stay within the above directory, and follow the structure found in the Material for MkDocs user guide.</p>"}, {"location": "contributing/common-components/modifying-common-components/#python-hooks", "title": "Python Hooks", "text": "<p>While this title is admittedly vague, we do have the option to add in custom python hooks to change deeper behaviour.</p> <p>Right now, this repo is using this system to help manage a lot of how inheritance of common components work, though it's conceivable that more needs come up down the road.</p> <p>As ever, be careful with what you change! These can have serious impacts.</p> <p>If you add in custom hooks:</p> <ol> <li>Place the hooks themselves in <code>./hooks/</code></li> <li>In <code>./mkdocs.yml</code>, update the <code>hooks</code> key with a path to your new hook</li> </ol>"}, {"location": "contributing/common-components/modifying-common-components/#theme-features", "title": "Theme Features", "text": "<p>If the entire org could benefit from a new (or tweaked) theme feature:</p> <ol> <li>In <code>./mkdocs.yml</code>, update the <code>theme.features</code> list with the new addition</li> <li>Update any applicable guides to make use of that new feature (if applicable)</li> </ol>"}, {"location": "contributing/common-components/modifying-common-components/#markdown-extensions-plugins", "title": "Markdown Extensions &amp; Plugins", "text": "<p>These work similarly to Theme Features, with some more work.</p> <ol> <li> <p>In <code>./mkdocs.yml</code>, update the <code>markdown_extensions</code> or <code>plugins</code> lists with the new addition</p> <p>Note</p> <p>Note the specific syntax being used here! Due to how MkDocs inheritance works, we must use this object syntax: <pre><code>markdown_extensions:\n    extension_name: {}\n</code></pre> instead of this list syntax: <pre><code>markdown_extensions:\n    - extension_name\n</code></pre></p> <p>See <code>./mkdocs.yml</code> for further samples.</p> </li> <li> <p>In <code>./requirements.txt</code>, add the name of the extension or plugin (if applicable \u2013 some extensions don't need to be explicitly installed!)</p> </li> </ol>"}, {"location": "contributing/common-components/updating-common-components/", "title": "Updating Common Components", "text": "<p>All of these guides share common components. These are things like css tweaks, page layout templates, announcement banners, and more.</p> <p>Note</p> <p>These common components live within the <code>./docs/_global/</code> folder of each guide's repo.</p> <p>Files here should not be modified without running the provided script!</p> <p>Instead of trying to manage all of these shared files many times, we've hosted them in their own config repo, and instead distribute a small python script to download the latest version of these components from that repo.</p> <p>In this manner, we've introduced a one-command workflow to fetch all of the latest global settings and ensure each guide is up-to-date with these changes.</p> <pre><code>python ./docs/_global/scripts/update-common-components.py\n</code></pre> <p>This will modify the contents of the <code>./docs/_global/</code> directory.</p>"}, {"location": "contributing/common-components/updating-common-components/#verifying-changes", "title": "Verifying Changes", "text": "<p>Once the update has finished, we recommend scanning through the guide to ensure these updates haven't negatively affected anything in the project.</p> <p>Once it looks good, commit the modified <code>./docs/_global/</code> folder, noting the change.</p>"}, {"location": "updating-legacy-docs/conversion-progress/", "title": "Conversion Progress", "text": "<p>This document outlines the current status of converting the existing docs.</p> <ul> <li> Main docsforadobe.dev site</li> <li> AE C++ SDK<ul> <li>Note: In progress</li> </ul> </li> <li> AE Expression Reference</li> <li> AE Scripting Guide</li> <li> AI Scripting Guide</li> <li> AME Scripting Guide<ul> <li>Note: In progress</li> </ul> </li> <li> Animate Scripting Guide</li> <li> ESTK<ul> <li>Note: In progress</li> </ul> </li> <li> PPro C++ SDK<ul> <li>Note: In progress</li> </ul> </li> <li> PPro Scripting Guide</li> </ul>"}, {"location": "updating-legacy-docs/converting-rst-to-md/", "title": ".rst -&gt; MD Conversion Process", "text": "<ul> <li>This is a one-time conversion process; it requires changing the Sphinx build system, building as markdown, replacing all the older rst files with the new markdown files, and then going through and cleaning up by hand.</li> <li>It is tedious, but the bulk of the work is cleaning vs actual conversion\u2013 and we can leverage the existing Sphinx setup.</li> <li>This relies on the sphinx_markdown_builder Sphinx plugin.</li> </ul> <p>Tip</p> <p>It is highly recommended to do this work in a child branch of the repo, vs working directly in main. This will be extremely destructive.</p> <p>This works in several main phases:</p> <ol> <li>Setup \u2013 installing required systems for the automated conversion</li> <li>Convert \u2013 running these systems to convert the .rst docs to .md</li> <li>Initialize MkDocs \u2013 set up the new system that will serve the files</li> <li>Text Cleanup \u2013 all of the work to turn the converted docs to a final product</li> <li>Project Cleanup \u2013 removing the legacy build system files</li> <li>Deploy</li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#1-setup", "title": "1. Setup", "text": "<p>First, all work should be done in a new branch. Historically, these have been named <code>change/mkdocs</code>.</p> <p>Once the work is done, submit a PR to merge it into the main branch.</p>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#setting-up-rst-md-conversion", "title": "Setting up RST -&gt; MD Conversion", "text": "<ol> <li>Install <code>sphinx</code> &amp; <code>sphinx_markdown_builder</code> (for converting from .rst to .md):     <pre><code>pip install sphinx sphinx_markdown_builder\n</code></pre></li> <li>Update Sphinx config to convert to Markdown<ul> <li>Navigate to <code>./docs/conf.py</code></li> <li>Replace all of the contents with only this:     <pre><code>extensions = [\"sphinx_markdown_builder\"]\n</code></pre></li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#setting-up-the-new-system", "title": "Setting up the new system", "text": "<ol> <li>Replace all contents of <code>./requirements.txt</code> with the following list of dependencies:     <pre><code>mkdocs\nmkdocs-material\nmkdocs-git-revision-date-localized-plugin\nmkdocs-print-site-plugin\n</code></pre></li> <li>Install the above requirements via <code>pip</code>:     <pre><code>pip install -r requirements.txt\n</code></pre></li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#2-convert", "title": "2. Convert", "text": "<ol> <li>Run the sphinx command to convert the docs     <pre><code>sphinx-build -M markdown ./docs ./build\n</code></pre><ul> <li>This will generate .md files within <code>./build/markdown</code></li> </ul> </li> <li>We want to replace all of the .rst files with the .md files, however if we simply delete the .rst and add the .md we will lose all of the git history!<ul> <li>To get around this, we're going to first rename all of the .rst files to .md, and then overwrite the \"fake\" renamed .md files with the converted .md files</li> </ul> </li> <li>Using your renamer tool of choice, rename all .rst files in docs/ to the .md extension</li> <li>Commit this rename change!<ul> <li>Be careful not to commit anything in <code>./build/</code>, as we don't want these in the repo (yet)</li> </ul> </li> <li>Now, overwrite all <code>./docs/</code> .md files with those from <code>./build/markdown/</code></li> <li>Delete the <code>./build/</code> folder, as it won't be needed</li> <li>Rename <code>./docs/index.md</code> to <code>./docs/_nav.md</code><ul> <li>This is a temporary process that we'll resolve later</li> <li>It needs to be rewritten in a different format, and moved into <code>./mkdocs.yml</code>, with this file deleted</li> </ul> </li> <li>Commit this overwrite change!<ul> <li>This solidifies the history, at which point we can start cleanup</li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#3-initialize-mkdocs", "title": "3. Initialize MkDocs", "text": "<p>Instead of initializing MkDocs from scratch, we're going to just copy files over from the After Effects Scripting Guide and tweak those to fit.</p> <ol> <li>Copy the following files from the above guide into this repo, overwriting if existing:<ul> <li><code>./.github/</code></li> <li><code>./_static/</code></li> <li><code>./docs/CNAME</code></li> <li><code>./docs/index.md</code></li> <li><code>./overrides/</code></li> <li><code>./.editorconfig</code></li> <li><code>./.gitattributes</code></li> <li><code>./.gitignore</code></li> <li><code>./.mkdocs.yml</code></li> </ul> </li> <li>Update anything related to \"After Effects Scripting Guide\" and make it relevant for this repo<ul> <li><code>./docs/index.md</code></li> <li><code>./.mkdocs.yml</code></li> </ul> </li> <li>Open a terminal to the root folder, and run the below command to serve the docs     <pre><code>mkdocs serve\n</code></pre></li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#4-text-cleanup", "title": "4. Text Cleanup", "text": ""}, {"location": "updating-legacy-docs/converting-rst-to-md/#bulk-cleanup", "title": "Bulk Cleanup", "text": ""}, {"location": "updating-legacy-docs/converting-rst-to-md/#search-replace-steps", "title": "Search &amp; Replace Steps", "text": "<ol> <li>Remove generated <code>&lt;a&gt;</code> links<ul> <li>Using regex, search for <code>&lt;a id=\".+\"&gt;&lt;/a&gt;(\\n|\\r)(\\n|\\r)</code> and replace with blank</li> </ul> </li> <li>Update notes, warnings, tips admonitions<ul> <li>Valid admonitions can be found here</li> <li>Using regex, search for <code>#### NOTE\\n(.+)</code> and replace with <code>!!! note\\n    $1</code></li> <li>Using regex, search for <code>#### WARNING\\n(.+)</code> and replace with <code>!!! warning\\n    $1</code></li> <li>Using regex, search for <code>#### TIP\\n(.+)</code> and replace with <code>!!! tip\\n    $1</code></li> </ul> </li> <li>Update case-sensitive syntax highlighting languages<ul> <li>Using regex, search for <code>```AppleScript</code> and replace with <code>```applescript</code></li> </ul> </li> <li>Replace nonstandard<ul> <li>Using regex, search for <code>\u201c|\u201d</code> and replace with <code>\"</code></li> <li>Using regex, search for <code>\u2018|\u2019</code> and replace with <code>'</code></li> <li>Using regex, search for <code>\u2013</code> and replace with <code>-</code></li> <li>Search for <code>\u2026</code> and replace with <code>...</code></li> </ul> </li> <li>Update offset sublist settings<ul> <li>Using regex, search for<code>(\\n|\\r)  : -</code> and replace with <code>:\\n    -</code> \u2013 only seems to be an issue with changelog</li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#look-for-lingering-bulk-conversion-issues", "title": "Look for lingering bulk-conversion issues", "text": "<ol> <li>Search for lines starting with <code>: -</code> and</li> <li>Search for rst-specific syntax such as the below, and fix them as needed<ul> <li><code>.. note::</code></li> <li><code>::</code></li> <li><code>:ref:</code></li> <li><code>.. WARNING::</code></li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#manual-cleanup", "title": "Manual Cleanup", "text": ""}, {"location": "updating-legacy-docs/converting-rst-to-md/#sidebar-navigation", "title": "Sidebar / Navigation", "text": "<p>The sidebar / navigation needs to be present inside of <code>./mkdocs.yml</code>, formatted identically to how it's presented in the After Effects Scripting Guide repo.</p> <p>Earlier, we set aside <code>./docs/_nav.md</code> as a reference point. Now, use that file as the basis for how to display the nav within the <code>nav</code> section within <code>./mkdocs.yml</code>.</p> <p>When finished, delete <code>./docs/_nav.md</code>.</p>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#links", "title": "Links", "text": "<ol> <li>Search for hyphenated cross-links and replace with plain slugs, i.e.<ul> <li><code>[CharacterRange.pasteFrom()](../text/characterrange.md#characterrange-pastefrom)</code> to</li> <li><code>[CharacterRange.pasteFrom()](../text/characterrange.md#characterrangepastefrom)</code></li> <li>This regex search can help, but fails when the link is also a header (see changelog):<ul> <li><code>(?:#)(.*?)-(.*?)(?:\\))</code> =&gt; <code>#$1$2)</code></li> <li>Note: this also fails for any page that uses hyphens in page names, which is... most of them</li> </ul> </li> </ul> </li> <li>Search for anchored links to the top-level page &amp; replace with direct page link, i.e.<ul> <li><code>[Settings object](../other/settings.md#settings)</code> to</li> <li><code>[Settings object](../other/settings.md)</code></li> <li>This regex search / replace can help:<ul> <li><code>(.*)\\.md#(\\1)\\)</code> =&gt; <code>$1.md)</code></li> </ul> </li> </ul> </li> <li>Search for empty in-page links and replace them with the proper format, i.e.<ul> <li><code>[app.watchFolder()]()</code> to</li> <li><code>[app.watchFolder()](#appwatchfolder)</code></li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#update-tables", "title": "Update Tables", "text": "<p>In RST, tables didn't need to have header rows. In markdown, they do (should). This, unfortunately, means a lot of work is needed as the conversion method isn't capable of generating table headers.</p> <p>Note</p> <p>We're also going to use this opportunity to add in property types for arguments &amp; parameters, making the docs friendlier to use.</p> <ul> <li>Set up table headers</li> <li>Format tables according to the required table format.</li> </ul> <p>See Style Guide - Tables.</p>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#titles", "title": "Titles", "text": "<p>See Style Guide - Title Hierarchy.</p>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#other", "title": "Other", "text": "<ul> <li>Check that images are properly linked to the root <code>./docs/_static</code> folder</li> <li>Value ranges should be formatted as: <code>`[0.0..10800.0]`</code> (surrounded by backticks, two periods between min and max)</li> <li>Sort class properties into \"Attributes\" and \"Methods\"<ul> <li>Alphabetically sort methods and attributes</li> </ul> </li> <li>Inline doublespace     <pre><code>(?&lt;![\\n\\r\\| ])( ){2,}(?![ \\|])\n</code></pre></li> <li>Bad indent (not a multiple of 4 spaces) <code>^( ){1,3}(?:(\\1)(\\1)(\\1)(\\1))*(?=\\S+)</code><ul> <li>(based on this stackoverflow answer)</li> </ul> </li> <li>Remove unnecessary <code>&lt;br/&gt;</code></li> </ul>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#5-project-cleanup", "title": "5. Project Cleanup", "text": "<p>Now that we've got a full suite of .md files, we can remove some old cruft:</p> <ul> <li><code>./build/</code></li> <li><code>./docs/**/*.rst</code></li> <li><code>./docs/conf.py</code></li> <li><code>./.readthedocs.yaml</code></li> <li><code>./make.bat</code></li> <li><code>./Makefile</code></li> </ul>"}, {"location": "updating-legacy-docs/converting-rst-to-md/#6-open-a-pr", "title": "6. Open a PR!", "text": "<p>Once the above steps are complete, it's time to open a PR for review!</p> <p>Open a new Pull Request for merging the <code>change/mkdocs</code> branch into the main branch of the repo.</p> <p>Once reviewed &amp; accepted by an org admin, your converted docs will be pushed into main repo and it'll be time for an org admin to Deploy the docs!</p>"}, {"location": "updating-legacy-docs/deploying-the-docs/", "title": "Deploying the Updated Docs", "text": "<p>Tip</p> <p>Note that the following guide is only possible for Org admins. If you're stuck at this step, please contact an organization admin to proceed.</p> <p>Once a conversion-branch PR has been approved &amp; merged into the main repo, it's time to deploy the new docs.</p> <p>Once the PR has been merged in, the automated build process (from <code>.\\github\\workflows\\ci.yml</code>) should run, generating a new branch <code>gh-pages</code>. This is the branch we'll use to generate the hosted page via Github Pages.</p>"}, {"location": "updating-legacy-docs/deploying-the-docs/#changes-in-the-repo", "title": "Changes in the Repo", "text": "<ol> <li>Update the <code>./docs/CNAME</code> file to reflect the new custom domain (ie <code>ae-scripting.docsforadobe.dev</code> -&gt; <code>ai-scripting.docsforadobe.dev</code>) &amp; ensure this change is committed &amp; pushed<ul> <li>If this isn't committed to the main branch, then every push to the repo (and CI action) will remove this file and lose the custom domain. See this gh-pages issue.</li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/deploying-the-docs/#changes-on-github", "title": "Changes on Github", "text": "<ol> <li>From the Github repo, set up Pages &amp; have it use this new branch.<ul> <li><code>Settings</code> &gt; <code>Pages</code> &gt; Enable Pages</li> <li><code>Deploy from a Branch</code> &gt; Choose the named branch above</li> <li>For folder, choose \"/ (root)\"</li> </ul> </li> <li>Set up the custom domain (<code>xx.docsforadobe.dev</code>)<ul> <li>This may already be defined by the above CNAME file, but check here just in case.</li> <li>Enable \"Enforce HTTPs\"</li> </ul> </li> </ol>"}, {"location": "updating-legacy-docs/deploying-the-docs/#changes-on-web-host", "title": "Changes on web host", "text": "<ol> <li>In the domain registrar / web host, enable DNS-only hosting for this domain</li> <li>Add a CNAME record pointing to <code>docsforadobe.github.io</code></li> <li>Apply for an SSL cert</li> <li>Remove any readthedocs.io hooks from the Github repo</li> <li>Set up branch permissions to require PRs to the main branch</li> </ol>"}, {"location": "updating-legacy-docs/deploying-the-docs/#changes-in-readthedocsio", "title": "Changes in readthedocs.io", "text": "<ol> <li>Remove the legacy docs from readthedocs.io</li> </ol>"}]}